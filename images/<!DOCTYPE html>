<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chrome Dinosaur Game</title>
  <style>
    body {
      background: #f7f7f7;
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
    }
    #game-container {
      position: relative;
      width: 800px;
      height: 200px;
      margin: 40px auto;
      background: #fff;
      border: 2px solid #ccc;
      overflow: hidden;
    }
    #dino {
      position: absolute;
      left: 50px;
      width: 44px;
      height: 47px;
      image-rendering: pixelated;
      transition: width 0.1s, height 0.1s, bottom 0.1s;
      z-index: 10;
    }
    .cactus {
      position: absolute;
      width: 25px;
      height: 50px;
      image-rendering: pixelated;
      z-index: 5;
      transition: bottom 0.1s;
    }
    #ground {
      position: absolute;
      left: 0;
      bottom: 0;
      width: 100%;
      height: 5px;
      background: #888;
    }
    .lane-divider {
      position: absolute;
      left: 0;
      width: 100%;
      height: 2px;
      background: #ccc;
    }
    #score {
      position: absolute;
      top: 10px;
      right: 20px;
      font-size: 20px;
      color: #555;
      font-family: monospace;
    }
    #game-over {
      display: none;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 20;
      width: 500px;
      max-width: 90%;
      pointer-events: none;
      background: none;
      border: none;
      padding: 0;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <img id="dino" src="images/trex.png" alt="Dino">
    <div id="ground"></div>
    <div class="lane-divider" style="bottom: 55px;"></div>
    <div class="lane-divider" style="bottom: 110px;"></div>
    <div id="score">0</div>
    <img id="game-over" src="images/game over screen.png" alt="Game Over">
  </div>
  <script>
    // Image paths
    const dinoIdleImg = 'images/trex.png';
    const dinoRunImgs = [
      'images/trex run 1.png',
      'images/trex run 2.png'
    ];
    const dinoCrouchImgs = [
      'images/trex crouch 1.png',
      'images/trex crouch 2.png'
    ];
    const dinoGameOverImg = 'images/trex game over.png';
    const cactusImg = 'images/cactus.png';

    // Lane setup
    const laneCount = 3;
    const laneBottoms = [0, 55, 110]; // bottom px for each lane (0 = ground, 2 higher lanes)
    let dinoLane = 0; // 0 = bottom, 1 = middle, 2 = top

    // Game variables
    const dino = document.getElementById('dino');
    const gameContainer = document.getElementById('game-container');
    const scoreElem = document.getElementById('score');
    const gameOverElem = document.getElementById('game-over');
    const ground = document.getElementById('ground');
    let dinoY = 0;
    let dinoVY = 0;
    let isJumping = false;
    let isCrouching = false;
    let gravity = -0.7;
    let jumpPower = 12;
    let groundY = 0;
    let cactusSpeed = 7;
    let cactusInterval = 1200;
    let score = 0;
    let running = false;
    let dinoFrame = 0;
    let dinoAnimTimer = 0;
    let cacti = [];
    let gameLoopId = null;
    let cactusSpawnerTimeouts = [];

    function showIdle() {
      dino.src = dinoIdleImg;
      dino.style.height = '47px';
      dino.style.width = '44px';
      dinoLane = 0;
      dino.style.bottom = laneBottoms[dinoLane] + 'px';
      scoreElem.textContent = '0';
      gameOverElem.style.display = 'none';
      isCrouching = false;
    }

    // Handle lane switching and crouching
    document.addEventListener('keydown', (e) => {
      if (!running && e.code === 'Space') {
        startGame();
        return;
      }
      if (!running && e.code === 'Space' && gameOverElem.style.display === 'block') {
        restartGame();
        return;
      }
      if (!running) return;

      if (e.code === 'ArrowUp') {
        if (dinoLane < laneCount - 1) {
          dinoLane++;
          dino.style.bottom = laneBottoms[dinoLane] + 'px';
        }
      }
      if (e.code === 'ArrowDown') {
        if (dinoLane > 0) {
          dinoLane--;
          dino.style.bottom = laneBottoms[dinoLane] + 'px';
        }
      }
      if (e.code === 'Space' && !isCrouching) {
        isCrouching = true;
        dino.style.height = '30px';
        dino.style.width = '59px';
      }
    });

    document.addEventListener('keyup', (e) => {
      if (e.code === 'Space' && isCrouching) {
        isCrouching = false;
        dino.style.height = '47px';
        dino.style.width = '44px';
      }
    });

    function spawnCactusInLane(lane) {
      // 1, 2, or 3 cacti side by side in specific lane
      const groupSize = Math.floor(Math.random() * 3) + 1;
      const cactusGroup = [];
      let groupOffset = gameContainer.offsetWidth;
      
      for (let i = 0; i < groupSize; i++) {
        const cactus = document.createElement('img');
        cactus.src = cactusImg;
        cactus.className = 'cactus';
        cactus.style.left = (groupOffset + i * 28) + 'px';
        cactus.style.width = '25px';
        cactus.style.height = '50px';
        cactus.style.bottom = laneBottoms[lane] + 'px';
        cactus.dataset.lane = lane;
        gameContainer.appendChild(cactus);
        cactusGroup.push(cactus);
        cacti.push(cactus);
      }
    }

    function updateCacti() {
      for (let i = cacti.length - 1; i >= 0; i--) {
        let cactus = cacti[i];
        let left = parseInt(cactus.style.left);
        cactus.style.left = (left - cactusSpeed) + 'px';
        if (left < -30) {
          cactus.remove();
          cacti.splice(i, 1);
        }
      }
    }

    function checkCollision() {
      const dinoRect = dino.getBoundingClientRect();
      for (let cactus of cacti) {
        const cactusRect = cactus.getBoundingClientRect();
        // Only check collision if in the same lane
        if (parseInt(cactus.dataset.lane) === dinoLane) {
          if (
            dinoRect.right - 10 > cactusRect.left &&
            dinoRect.left + 10 < cactusRect.right &&
            dinoRect.bottom - 5 > cactusRect.top &&
            dinoRect.top + 5 < cactusRect.bottom
          ) {
            return true;
          }
        }
      }
      return false;
    }

    function updateDinoAnim() {
      dinoAnimTimer++;
      if (dinoAnimTimer % 6 === 0) {
        dinoFrame = (dinoFrame + 1) % 2;
        if (isCrouching) {
          dino.src = dinoCrouchImgs[dinoFrame];
        } else {
          dino.src = dinoRunImgs[dinoFrame];
        }
      }
    }

    function updateScore() {
      score++;
      scoreElem.textContent = score;
      if (score % 100 === 0 && cactusSpeed < 20) {
        cactusSpeed += 0.5;
      }
    }

    function gameLoop() {
      updateDinoAnim();
      updateCacti();
      if (checkCollision()) {
        endGame();
        return;
      }
      updateScore();
      gameLoopId = requestAnimationFrame(gameLoop);
    }

    function startGame() {
      dinoLane = 0;
      dino.style.bottom = laneBottoms[dinoLane] + 'px';
      cactusSpeed = 7;
      cactusInterval = 1200;
      score = 0;
      running = true;
      dinoFrame = 0;
      dinoAnimTimer = 0;
      isCrouching = false;
      dino.src = dinoIdleImg;
      dino.style.height = '47px';
      dino.style.width = '44px';
      scoreElem.textContent = '0';
      gameOverElem.style.display = 'none';
      for (let cactus of cacti) cactus.remove();
      cacti = [];
      startCactusSpawners();
      gameLoop();
    }

    function endGame() {
      running = false;
      isCrouching = false;
      dino.style.height = '47px';
      dino.style.width = '44px';
      dino.src = dinoGameOverImg;
      gameOverElem.style.display = 'block';
      cancelAnimationFrame(gameLoopId);
      // Clear all cactus spawner timeouts
      cactusSpawnerTimeouts.forEach(timeout => clearTimeout(timeout));
      cactusSpawnerTimeouts = [];
    }

    function restartGame() {
      showIdle();
      setTimeout(() => {
        startGame();
      }, 200);
    }

    function startCactusSpawners() {
      // Start a spawner for each lane
      for (let lane = 0; lane < laneCount; lane++) {
        spawnCactusInLaneRandomly(lane);
      }
    }

    function spawnCactusInLaneRandomly(lane) {
      if (!running) return;
      
      // Random interval between 500ms and 3000ms
      const interval = Math.random() * 2500 + 500;
      
      const timeout = setTimeout(() => {
        if (running) {
          spawnCactusInLane(lane);
          spawnCactusInLaneRandomly(lane); // Schedule next spawn
        }
      }, interval);
      
      cactusSpawnerTimeouts.push(timeout);
    }

    // Initial setup
    window.onload = () => {
      groundY = 0;
      showIdle();
    };
  </script>
</body>
</html>